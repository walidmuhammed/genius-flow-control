import { supabase } from "@/integrations/supabase/client";

export interface CourierSettlement {
  id: string;
  settlement_id: string;
  courier_id: string;
  total_collected_usd: number;
  total_collected_lbp: number;
  total_courier_fees_usd: number;
  total_courier_fees_lbp: number;
  balance_usd: number;
  balance_lbp: number;
  direction: 'courier_to_admin' | 'admin_to_courier';
  status: 'Pending' | 'In Progress' | 'Paid';
  payment_method?: 'Cash Handover' | 'Bank Transfer' | 'Wallet Adjustment';
  notes?: string;
  created_by?: string;
  created_at: string;
  updated_at: string;
  courier?: {
    id: string;
    full_name: string;
    phone?: string;
    email?: string;
    vehicle_type?: string;
  };
  orders?: Array<{
    id: string;
    order_id: number;
    reference_number: string;
    collected_amount_usd?: number;
    collected_amount_lbp?: number;
    courier_fee_usd?: number;
    courier_fee_lbp?: number;
    status: string;
    created_at: string;
  }>;
}

export interface CreateSettlementData {
  courier_id: string;
  order_ids: string[];
  notes?: string;
}

export async function getCourierSettlements(): Promise<CourierSettlement[]> {
  const { data, error } = await supabase
    .from('courier_settlements')
    .select(`
      *,
      courier:couriers!courier_settlements_courier_id_fkey (
        id,
        full_name,
        phone,
        email,
        vehicle_type
      )
    `)
    .order('created_at', { ascending: false });

  if (error) throw error;
  return (data || []) as CourierSettlement[];
}

export async function getCourierSettlementById(id: string): Promise<CourierSettlement | null> {
  const { data, error } = await supabase
    .from('courier_settlements')
    .select(`
      *,
      courier:couriers!courier_settlements_courier_id_fkey (
        id,
        full_name,
        phone,
        email,
        vehicle_type
      )
    `)
    .eq('id', id)
    .single();

  if (error) throw error;
  return data as CourierSettlement;
}

export async function getSettlementOrders(settlementId: string) {
  const { data, error } = await supabase
    .from('orders')
    .select(`
      id,
      order_id,
      reference_number,
      collected_amount_usd,
      collected_amount_lbp,
      courier_fee_usd,
      courier_fee_lbp,
      status,
      created_at,
      customer:customers!orders_customer_id_fkey (
        id,
        name
      )
    `)
    .eq('courier_settlement_id', settlementId)
    .order('created_at', { ascending: false });

  if (error) throw error;
  return data || [];
}

export async function getOpenOrdersByCourier(courierId: string) {
  const { data, error } = await supabase
    .from('orders')
    .select(`
      id,
      order_id,
      reference_number,
      collected_amount_usd,
      collected_amount_lbp,
      courier_fee_usd,
      courier_fee_lbp,
      status,
      package_type,
      created_at,
      customer:customers!orders_customer_id_fkey (
        id,
        name
      )
    `)
    .eq('courier_id', courierId)
    .in('status', ['Delivered', 'Unsuccessful'])
    .eq('courier_settlement_status', 'None')
    .order('created_at', { ascending: false });

  if (error) throw error;
  return data || [];
}

export async function createCourierSettlement(data: CreateSettlementData): Promise<CourierSettlement> {
  // First, get the orders to calculate totals
  const { data: orders, error: ordersError } = await supabase
    .from('orders')
    .select('*')
    .in('id', data.order_ids)
    .eq('courier_id', data.courier_id)
    .eq('courier_settlement_status', 'None');

  if (ordersError) throw ordersError;
  if (!orders || orders.length === 0) {
    throw new Error('No eligible orders found for settlement');
  }

  // Calculate totals
  let totalCollectedUSD = 0;
  let totalCollectedLBP = 0;
  let totalCourierFeesUSD = 0;
  let totalCourierFeesLBP = 0;

  orders.forEach(order => {
    totalCollectedUSD += (order.collected_amount_usd || 0);
    totalCollectedLBP += (order.collected_amount_lbp || 0);
    totalCourierFeesUSD += (order.courier_fee_usd || 0);
    totalCourierFeesLBP += (order.courier_fee_lbp || 0);
  });

  const balanceUSD = totalCollectedUSD - totalCourierFeesUSD;
  const balanceLBP = totalCollectedLBP - totalCourierFeesLBP;
  const direction = (balanceUSD >= 0 && balanceLBP >= 0) ? 'courier_to_admin' : 'admin_to_courier';

  // Create settlement (settlement_id will be auto-generated by trigger)
  const { data: settlement, error: settlementError } = await supabase
    .from('courier_settlements')
    .insert({
      settlement_id: '', // Will be auto-generated by database trigger
      courier_id: data.courier_id,
      total_collected_usd: totalCollectedUSD,
      total_collected_lbp: totalCollectedLBP,
      total_courier_fees_usd: totalCourierFeesUSD,
      total_courier_fees_lbp: totalCourierFeesLBP,
      balance_usd: balanceUSD,
      balance_lbp: balanceLBP,
      direction,
      notes: data.notes || '',
      created_by: (await supabase.auth.getUser()).data.user?.id
    })
    .select()
    .single();

  if (settlementError) throw settlementError;

  // Update orders to link to settlement
  const { error: updateError } = await supabase
    .from('orders')
    .update({
      courier_settlement_id: settlement.id,
      courier_settlement_status: 'Pending'
    })
    .in('id', data.order_ids);

  if (updateError) throw updateError;

  return settlement as CourierSettlement;
}

export async function recordCashHandover(settlementId: string, orderIds?: string[]): Promise<void> {
  const { error } = await supabase
    .from('courier_settlements')
    .update({
      status: 'In Progress',
      updated_at: new Date().toISOString()
    })
    .eq('id', settlementId);

  if (error) throw error;

  // Update orders cash handover status - either specific orders or all orders in settlement
  let query = supabase
    .from('orders')
    .update({
      cash_handover_status: 'Confirmed'
    });

  if (orderIds && orderIds.length > 0) {
    query = query.in('id', orderIds);
  } else {
    query = query.eq('courier_settlement_id', settlementId);
  }

  const { error: ordersError } = await query;
  if (ordersError) throw ordersError;
}

export async function markSettlementPaid(settlementId: string, paymentMethod: string, notes?: string): Promise<void> {
  const now = new Date().toISOString();
  
  const { error } = await supabase
    .from('courier_settlements')
    .update({
      status: 'Paid',
      payment_method: paymentMethod,
      notes: notes,
      paid_at: now,
      updated_at: now
    })
    .eq('id', settlementId);

  if (error) throw error;

  // Update orders settlement status
  const { error: ordersError } = await supabase
    .from('orders')
    .update({
      courier_settlement_status: 'Paid'
    })
    .eq('courier_settlement_id', settlementId);

  if (ordersError) throw ordersError;
}

export async function getCouriersWithOpenOrders() {
  const { data: couriers, error } = await supabase
    .from('couriers')
    .select(`
      id,
      full_name,
      phone,
      email,
      vehicle_type,
      avatar_url
    `)
    .eq('status', 'active');

  if (error) throw error;

  // Get open orders for each courier
  const couriersWithBalances = await Promise.all(
    (couriers || []).map(async (courier) => {
      const balance = await getCourierBalance(courier.id);
      return {
        ...courier,
        ...balance
      };
    })
  );

  return couriersWithBalances.filter(courier => courier.orderCount > 0);
}

export async function getCourierBalance(courierId: string) {
  const { data: orders, error } = await supabase
    .from('orders')
    .select('collected_amount_usd, collected_amount_lbp, courier_fee_usd, courier_fee_lbp')
    .eq('courier_id', courierId)
    .in('status', ['Delivered', 'Unsuccessful'])
    .eq('courier_settlement_status', 'None');

  if (error) throw error;

  let totalCollectedUSD = 0;
  let totalCollectedLBP = 0;
  let totalCourierFeesUSD = 0;
  let totalCourierFeesLBP = 0;

  orders?.forEach(order => {
    totalCollectedUSD += (order.collected_amount_usd || 0);
    totalCollectedLBP += (order.collected_amount_lbp || 0);
    totalCourierFeesUSD += (order.courier_fee_usd || 0);
    totalCourierFeesLBP += (order.courier_fee_lbp || 0);
  });

  return {
    totalCollectedUSD,
    totalCollectedLBP,
    totalCourierFeesUSD,
    totalCourierFeesLBP,
    balanceUSD: totalCollectedUSD - totalCourierFeesUSD,
    balanceLBP: totalCollectedLBP - totalCourierFeesLBP,
    orderCount: orders?.length || 0
  };
}